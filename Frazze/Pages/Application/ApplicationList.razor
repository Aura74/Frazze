@page "/application"
@inject IApplicationsRepository _applicationRepository
@inject IJSRuntime _jsRuntime

<_DeleteConfirmation IsParentComponentProcessing="IsLoading" ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>

<div class="row mt-4">
    <div class="col-6">
        <h4 class="card-title text-primary">Application List</h4>
    </div>
    <div class="col-4 offset-2">
        <a href="application/create" class="btn btn-primary form-control"><i class="bi bi-plus-lg"></i> Add New Application </a>
    </div>
    
<div class="col-12 p-3">
    @if (Applications.Any())
    {
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Created</th>
                <th>Knappar</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var objp in Applications)
            {
                <tr>
                    <td>
                        @objp.ApplicationID
                    </td> 
                    <td>
                        @objp.ApplicationName
                    </td> 
                    <td>
                        @objp.created
                    </td> 
                    <td>
                                <NavLink href="@($"application/edit/{objp.ApplicationID}")" class="btn-primary btn"><i class="bi bi-pencil"></i> Edit</NavLink>
                                <button class="btn btn-danger" @onclick="()=>HandleDelete(objp.ApplicationID)"><i class="bi bi-trash"></i> Delete</button>
                            </td>
                </tr>
            }
            </tbody>
        </table>
    }
    
    else
    {
        if (IsLoading)
        {
            //loading gif
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            //no records
            <p>No recrods found.</p>
        }
    }

</div>
</div>

@code {
    private IEnumerable<ApplicationsDTO> Applications { get; set; } = new List<ApplicationsDTO>();
    public bool IsLoading { get; set; }
    private int DeleteAppId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadPh();
        }
    }
    private async Task LoadPh()
    {
        IsLoading=true;
        StateHasChanged();
        Applications = await _applicationRepository.GetAll();
        IsLoading=false;
        StateHasChanged();
    }

    private void HandleDelete(int id)
    {
        DeleteAppId=id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsLoading=true;
        if (isConfirmed && DeleteAppId!=0)
        {
            await Task.Delay(200);
    //delete
            await _applicationRepository.Delete(DeleteAppId);
            await LoadPh();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
        IsLoading=false;
    }
}