@page "/phrase/create"
@page "/phrase/edit/{id:int}"
@using Microsoft.AspNetCore.Components
@inject IPhrasesRepository _phrasesRepository
@inject NavigationManager _navigationManager

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Phrase</h3>

    <div class="col-10">
    @if (IsLoading)
    {
        <div class="text-center">
            <img src="/images/loading.gif">
        </div>
    }
    else{
            <EditForm Model="PhraseCode" OnValidSubmit="UpsertPhrase">
            <DataAnnotationsValidator/>
            @*<ValidationSummary/>*@
            <div class="form-group">
                
                <label>Phrase</label>
                <InputText @bind-Value="PhraseCode.Phrase" class="form-control"></InputText>
                @*<ValidationMessage For="()=>PhraseCode.PhraseCode"></ValidationMessage>*@
                
                <label>Culture</label>
                <InputText @bind-Value="PhraseCode.Culture" class="form-control"></InputText>
               
                <label>Element</label>
                <InputText @bind-Value="PhraseCode.Element" class="form-control"></InputText>
            </div>

            <div class="form-group py-2">
                @* <button class="btn btn-primary" type="submit">@Title</button>*@
                <button class="btn btn-primary">@Title</button>
                <NavLink href="phrase" class="btn btn-secondary"> Back to Index</NavLink>
            </div>
        </EditForm>
    }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private PhrasesDTO PhraseCode { get; set; } = new PhrasesDTO();
    private string Title { get; set; } = "Create";

    public bool IsLoading { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id==0)
            {
    //create
                IsLoading=false;
            }
            else
            {
    //update
                Title="Update";
                await LoadPh();
            }
        }
    }

    private async Task LoadPh()
    {
        IsLoading=true;
        StateHasChanged();
        PhraseCode = await _phrasesRepository.Get(Id);
        IsLoading=false;
        StateHasChanged();
    }

    public async Task UpsertPhrase()
    {
        if (PhraseCode.PhraseID==0)
        {
            //create
            await _phrasesRepository.Create(PhraseCode);
        }
        else
        {
            //update
            await _phrasesRepository.Update(PhraseCode);
        }
        _navigationManager.NavigateTo("phrase");
    }


}